---
description: 与单元测试相关时
globs:
alwaysApply: false
---
# 单元测试规范

## 📋 测试任务清单

┌─────────────────────────────────────────────────────────────────┐
│ 1. 测试文件创建与命名                                             │
└─────────────────────────────────────────────────────────────────┘

• 测试文件命名格式：`[function-name].test.ts`
• 测试文件与源文件放在同一目录下
• 使用 TypeScript 编写测试用例
• 引用源文件：参考 [vitest.config.ts](mdc:vitest.config.ts) 了解测试配置

┌─────────────────────────────────────────────────────────────────┐
│ 2. 测试框架配置                                                  │
└─────────────────────────────────────────────────────────────────┘

• 使用 Vitest 作为测试框架
• 启用全局变量模式（globals: true）
• DOM 相关测试使用 happy-dom 环境
• 非 DOM 测试使用默认 node 环境
• 在需要 DOM 环境的测试文件头部添加：`/** @vitest-environment happy-dom */` (如果是在 packages/dom 下的文件，不需要添加)

┌─────────────────────────────────────────────────────────────────┐
│ 3. 测试用例结构                                                  │
└─────────────────────────────────────────────────────────────────┘

• 使用 `describe` 描述测试套件，命名与被测试函数相同
• 使用 `it` 描述具体测试用例，采用行为描述格式
• 测试用例分类：
  - 正常路径测试（happy path）
  - 边界情况测试（edge cases）
  - 错误处理测试（error handling）
  - 类型安全测试（type safety）

┌─────────────────────────────────────────────────────────────────┐
│ 4. 测试导入与设置                                                │
└─────────────────────────────────────────────────────────────────┘

• 必需导入：`import { describe, expect, it } from 'vitest'`
• 需要 mock 时导入：`import { afterEach, beforeEach, vi } from 'vitest'`
• 导入被测试函数：`import { functionName } from './functionName'`
• 使用 `afterEach(() => { vi.restoreAllMocks() })` 清理 mock

┌─────────────────────────────────────────────────────────────────┐
│ 5. 测试用例编写规范                                              │
└─────────────────────────────────────────────────────────────────┘

• 每个测试用例只测试一个特定行为
• 使用描述性的测试名称，说明预期行为
• 遵循 AAA 模式：Arrange（准备）、Act（执行）、Assert（断言）
• 使用 `expect().toMatchInlineSnapshot()` 进行快照测试
• 对于异常情况使用 `expect(() => {}).toThrowError()`

┌─────────────────────────────────────────────────────────────────┐
│ 6. Mock 和测试工具使用                                           │
└─────────────────────────────────────────────────────────────────┘

• 使用 `vi.spyOn()` 监听方法调用
• 使用 `vi.fn()` 创建 mock 函数
• 使用 `vi.resetAllMocks()` 或 `vi.restoreAllMocks()` 清理
• DOM 测试时正确设置和清理 DOM 状态
• 在 `beforeEach` 中设置，在 `afterEach` 中清理

┌─────────────────────────────────────────────────────────────────┐
│ 7. 代码质量要求                                                  │
└─────────────────────────────────────────────────────────────────┘

• 遵循 DRY 原则：提取共用的测试数据和设置
• 遵循 KISS 原则：保持测试简单易懂
• 遵循 SOLID 原则：每个测试职责单一
• 遵循 YAGNI 原则：只测试必要的功能
• 使用多行注释格式：`/* 注释内容 */`

┌─────────────────────────────────────────────────────────────────┐
│ 8. 特殊测试场景                                                  │
└─────────────────────────────────────────────────────────────────┘

• 类型检查测试：使用 `// @ts-expect-error` 标记预期的类型错误
• 环境特定测试：浏览器 API 相关功能需要 happy-dom 环境
• 异步函数测试：使用 `async/await` 处理异步操作
• 错误抛出测试：验证特定条件下是否正确抛出异常
• 性能测试：使用适当的工具测量执行时间

┌─────────────────────────────────────────────────────────────────┐
│ 9. 测试覆盖率                                                    │
└─────────────────────────────────────────────────────────────────┘

• 确保核心业务逻辑达到 100% 覆盖率
• 覆盖所有分支和边界条件
• 排除 index.ts 导出文件的覆盖率统计
• 使用 `pnpm test:coverage` 查看覆盖率报告

┌─────────────────────────────────────────────────────────────────┐
│ 10. 示例测试模板                                                 │
└─────────────────────────────────────────────────────────────────┘

```typescript
/*
 * DOM 相关测试需要添加环境声明
 * @vitest-environment happy-dom
 */
import { describe, expect, it, afterEach, vi } from 'vitest'

import { functionName } from './functionName'

describe('functionName', () => {
  afterEach(() => {
    vi.restoreAllMocks()
  })

  it('should return expected value for valid input', () => {
    /* 正常路径测试 */
    const result = functionName('validInput')
    expect(result).toBe('expectedOutput')
  })

  it('should handle edge cases correctly', () => {
    /* 边界情况测试 */
    expect(functionName('')).toBe(undefined)
    expect(functionName(null as any)).toBe(undefined)
  })

  it('should throw error for invalid input', () => {
    /* 错误处理测试 */
    expect(() => {
      functionName('invalidInput')
    }).toThrowError('Expected error message')
  })
})
```

┌─────────────────────────────────────────────────────────────────┐
│ 11. 指定文件运行单元测试                                           │
└─────────────────────────────────────────────────────────────────┘
在根目录下运行 `test:once` 命令。如需测试 `packages/dom/src/styleUtil.test.ts`

```bash
pnpm test:once packages/dom/src/styleUtil.test.ts
```